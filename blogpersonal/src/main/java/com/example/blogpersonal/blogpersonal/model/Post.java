package com.example.blogpersonal.blogpersonal.model;

import java.util.ArrayList;
import java.util.List;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonManagedReference;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * Entity class representing a Post in the social media platform.
 * Posts are the main content pieces created by users that can receive comments and likes.
 * Each post belongs to a customer (author) and can have multiple comments and likes.
 * 
 * @author Your Name
 * @version 1.0
 * @since 2024
 */
@Entity // Marks this class as a JPA entity that will be mapped to a database table
@Getter // Lombok annotation: Automatically generates getter methods for all fields
@Setter // Lombok annotation: Automatically generates setter methods for all fields
@AllArgsConstructor // Lombok annotation: Generates a constructor with all fields as arguments
@NoArgsConstructor // Lombok annotation: Generates a no-argument constructor (required by JPA)
public class Post {

    /**
     * Primary key for the Post entity.
     * Automatically generated by the database using identity column strategy.
     * This value is unique for each post and cannot be null.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Database automatically generates unique ID
    private Long id;

    /**
     * The title or headline of the post.
     * This is typically a short, descriptive text that summarizes the post content.
     */
    private String title;

    /**
     * The main content/body of the post.
     * This contains the actual text, message, or information the author wants to share.
     */
    private String content;
    
    /**
     * Many-to-One relationship with Customer entity.
     * Many posts can be created by one customer (author).
     * This represents the author of the post.
     * 
     * JoinColumn: Creates a foreign key column "customer_id" in the posts table 
     * that references the "id" column in the customers table.
     * 
     * JsonBackReference: Prevents infinite recursion during JSON serialization
     * by excluding this field when serializing Post to JSON (used from Customer side).
     */
    @ManyToOne
    @JoinColumn(name = "customer_id", referencedColumnName = "id")
    @JsonBackReference(value = "customer-post")
    private Customer customer;

    /**
     * One-to-Many relationship with Like entities.
     * One post can receive multiple likes from different customers.
     * 
     * CascadeType.ALL: All operations (persist, merge, remove, refresh, detach) 
     * performed on a Post will be cascaded to its associated Like entities.
     * 
     * mappedBy = "post": Indicates that the Like entity owns the relationship 
     * through its "post" field.
     * 
     * JsonManagedReference: Used during serialization to include likes when 
     * converting Post to JSON, while preventing circular references.
     */
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "post")
    @JsonManagedReference(value = "post-like")
    private List<Like> like = new ArrayList<>();
    
    /**
     * One-to-Many relationship with Comment entities.
     * One post can have multiple comments from different customers.
     * 
     * CascadeType.ALL: Operations on Post will cascade to associated Comment entities.
     * 
     * mappedBy = "postCom": Indicates that the Comment entity owns the relationship
     * through its "postCom" field.
     * 
     * JsonManagedReference: Includes comments when serializing Post to JSON
     * while preventing infinite recursion.
     */
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "postCom")
    @JsonManagedReference(value = "post-comment")
    private List<Comment> comment = new ArrayList<>();

}
